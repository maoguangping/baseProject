<?xml version="1.0" encoding="UTF-8"?>
<!-- status=debug 可以查看log4j的装配过程 -->
<!--log4j 2定义的status级别有8个：ALL,TRACE, DEBUG, INFO, WARN, ERROR ,FATAL,OFF
    其实status属性是帮助开发者找错用的，它可以检测log4j 2的配置文件是否有错，也可以检测到死循环的logger-->
<configuration status="OFF">
    <!-- 定义下面的引用名 -->
    <Properties>
        <property name="log_pattern">%d{yyyy-MM-dd HH:mm:ss z} %-5level %class{36} %L %M - %msg%xEx%n</property>
        <property name="file_info_name">/logs/bootbase/appInfo.log</property>
        <property name="file_error_name">/logs/bootbase/appError.log</property>
        <property name="rolling_file_name">/logs/RollingFileInfo-%d{yyyy-MM-dd}-%i.log.gz</property>
        <!-- 日志切割的最小单位,只设置了info的日志切割，error的下面配置 -->
        <property name="every_file_size">50M</property>
        <property name="output_log_level">debug</property><!-- 日志输出级别 -->
    </Properties>

    <!--先定义所有的appender-->
    <appenders>
        <!--这个输出控制台的配置-->
        <Console name="Console" target="SYSTEM_OUT">
            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <ThresholdFilter level="trace" onMatch="ACCEPT" onMismatch="DENY"/>
            <!--这个都知道是输出日志的格式-->
            <PatternLayout pattern="${log_pattern}"/>
        </Console>

        <!--重要的是，如果有多个ThresholdFilter，那么Filters是必须的，同时在Filters中，
                首先要过滤不符合的日志级别，把不需要的首先DENY掉，然后再ACCEPT需要的日志级别，
                这个次序不能搞颠倒。-->
        <!--这个会打印出所有的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，
            作为存档-->
        <!-- 按月生成归档日志，可以使用 filePattern="logs/$${date:yyyy-MM}/app-%d{MM-dd-yyyy}-%i.log.gz" -->
        <!-- 显示error级别之外的信息 -->
        <RollingFile name="RollingFileInfo" fileName="${file_info_name}"
                     filePattern="${rolling_file_name}">
            <PatternLayout pattern="${log_pattern}"/>
            <SizeBasedTriggeringPolicy size="${every_file_size}"/>
            <Filters>
                <ThresholdFilter level="error" onMatch="DENY" onMismatch="NEUTRAL"/>
                <ThresholdFilter level="trace" onMatch="ACCEPT" onMismatch="DENY"/>
            </Filters>
        </RollingFile>

        <!--如果需要配置多个Rollingfile地址，还需要在root下添加appender-ref ref="RollingFile1"/>
            只显示error级别的信息
         -->
        <RollingFile name="RollingFileError" fileName="${file_error_name}"
                     filePattern="logs/RollingFileError-%d{yyyy-MM-dd}-%i.log.gz">
            <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss z} %-5level %class{36} %L %M - %msg%xEx%n"/>
            <SizeBasedTriggeringPolicy size="10MB"/>
            <Filters>
                <ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="DENY"/>
            </Filters>
        </RollingFile>
    </appenders>
    <!--然后定义logger，只有定义了logger并引入的appender，appender才会生效-->
    <loggers>
        <!-- 3rdparty Loggers,这里设置显示日志基本信息 -->
        <logger name="org.springframework.core" level="info">
        </logger>
        <logger name="org.springframework.beans" level="info">
        </logger>
        <logger name="org.springframework.context" level="info">
        </logger>
        <logger name="org.springframework.web" level="info">
        </logger>
        <logger name="org.jboss.netty" level="warn">
        </logger>
        <logger name="org.apache.http" level="warn">
        </logger>
        <logger name="com.mchange.v2" level="warn">
        </logger>
        <!--建立一个默认的root的logger，需要在root的level中指定输出的级别，-->
        <root level="${output_log_level}">
            <appender-ref ref="RollingFileInfo"/>
            <appender-ref ref="RollingFileError"/>
            <appender-ref ref="Console"/>
        </root>
    </loggers>
</configuration>